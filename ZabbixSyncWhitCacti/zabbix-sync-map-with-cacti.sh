#!/bin/bash
##Author: Narges Ahmadi (NarcisLinux)  Email:n.sedigheh.ahmadi@gmail.com
##Vertion 1
##It'd for sync Network Weathermap on Cacti with Zabbix map
##
#############Authentication#############
USER=''
#read  USER
PASS=''
#read -p "Password:" -s PASS

#ZABBIX_SERVER='zabbix.server.com'
#For example "API='http://192.168.0.100/zabbix/api_jsonrpc.php'"
API='http:///api_jsonrpc.php'



    authenticate() {
    #FUN authenticate: Authenticate with Zabbix API.
 echo `curl -s -H  'Content-Type: application/json-rpc' -d "{\"jsonrpc\": \"2.0\",\"method\":\"user.login\",\"params\":{\"user\":\""${USER}"\",\"password\":\""${PASS}"\"},\"auth\": null,\"id\":0}" $API`
  }

AUTH_TOKEN=`echo $(authenticate)|jq -r .result`
#echo $AUTH_TOKEN


#############Functions#############
    vertion() {
        basename $0
    }

    error() {
        sleep 1
    }

    trapper() {

                for i in $1
                do
                    echo $i
                done
        }

     getmap() {

curl --data-binary "{

    \"jsonrpc\": \"2.0\",
    \"method\": \"map.get\",
    \"params\": {
        \"output\": \"extend\",
        \"selectLinks\": \"extend\",
	\"selectSelements\":\"extend\",
        \"sysmapids\": \"$1\"
    },

\"auth\":\""${AUTH_TOKEN}"\" ,\"id\": 1}" -H 'content-type:application/json-rpc;'  $API  2> /dev/null
     }

      gettrigger() {

curl --data-binary "{

    \"jsonrpc\": \"2.0\",
    \"method\": \"trigger.get\",
    \"params\": {
        \"triggerids\": "$1",
	\"selectHosts\": [\"hostid\",\"host\"]
    },

\"auth\":\""${AUTH_TOKEN}"\" ,\"id\": 1}" -H 'content-type:application/json-rpc;'  $API   2> /dev/null
     }

    createcactimapheader() {
    echo "# Automatically generated by php-weathermap v0.98

FONTDEFINE 100 docs/example/Vera.ttf 10
BACKGROUND images/FDI-s4.jpg
WIDTH $1
HEIGHT $2
HTMLSTYLE overlib
KEYFONT 100
TITLE FDI-MAP
TIMEPOS 87 1637 Created: %b %d %Y %H:%M:%S

KEYPOS DEFAULT 101 1437 Traffic Load
KEYTEXTCOLOR 0 0 0
KEYOUTLINECOLOR 0 0 0
KEYBGCOLOR 255 255 255
BGCOLOR 255 255 255
TITLECOLOR 0 0 0
TIMECOLOR 0 0 0

SCALE DEFAULT 0 0 92 255 92 unknown
SCALE DEFAULT 0 100 92 255 92 UP


SCALE cactiupdown 0    0.5  192 192 192
SCALE cactiupdown 0.5  1.5  255   0   0
SCALE cactiupdown 1.5  2.5    0   0 255
SCALE cactiupdown 2.5  3.5    0 255   0

SET nowarn_clipping 1

# End of global section


# TEMPLATE-only NODEs:
NODE DEFAULT
	LABELFONT 100
	MAXVALUE 100
	LABELOFFSET S

# TEMPLATE-only LINKs:
LINK DEFAULT
	WIDTH 3
VIASTYLE angled
	LINKSTYLE oneway
	BWSTYLE angled
	BWFONT 100
	COMMENTFONT 100
	BWLABEL bits
	BANDWIDTH 100M " > $3
    }

    createcactimapnode() {

    echo "NODE $1
#	LABEL $1
	INFOURL /cacti/graph.php?rra_id=all&local_graph_id="$2"
	OVERLIBGRAPH /cacti/graph_image.php?rra_id=0&graph_nolegend=true&graph_height=100&graph_width=300&local_graph_id="$2"
	ICON images/grey-ball-32.png
	TARGET cactihost:1201
	USESCALE cactiupdown in percent
	POSITION $3 $4" >> $5

    }


    createcactimaplink() {

echo "LINK $1-$2
	USESCALE cactiupdown percent
	INFOURL /cacti/graph.php?rra_id=all&local_graph_id="$3"
	OVERLIBGRAPH /cacti/graph_image.php?local_graph_id="$3"&rra_id=0&graph_nolegend=true&graph_height=100&graph_width=300
#	INBWFORMAT {link:this:bandwidth_in:%2k}
#	OUTBWFORMAT Out: {link:this:bandwidth_in:%k} In: {link:this:bandwidth_out:%k}
#	TARGET /var/lib/cacti/rra/1203/49147.rrd:traffic_out_hc:- /var/lib/cacti/rra/1203/49144.rrd:-:traffic_in_hc
	NODES $1 $2
	BANDWIDTH 50M" >> $4

    }

#############Variables#############
CactiPassDB=""
CactiGraphName="\-\ Advanced Ping"
#CactiURl
#CactiLocalGraphID				//assigned value in code
#SelementNumber					//assigned value in code
#LinkNumber   					//assigned value in code

#MapSysmapids   				//assigned value in code
#HostName     		    		//assigned value in code
#HostName1      				//assigned value in code
#HostName2      				//assigned value in code
MapID=24
#MapWidth						//assigned value in code
#MapHeight						//assigned value in code

#ArraySelementInfo               //assigned value in code
#ArrayElementsOnSelementInfo     //assigned value in code
#ArrayLinkInfo                   //assigned value in code


FilenameMapInfo="/tmp/Zabbix-map-info"
FilenameElementHostID="/tmp/Zabbix-element-hostid"
FilenameCactiMapConfig="/var/www/cacti/plugins/weathermap/configs//FDI-cacti-weademap-Snmpc-LTE-Backhaul-base-on-ICMP.conf"
FilenameHostNameAndSelementIDList="/tmp/zabbix-Host-and-selemet-list"
FilenameCactiGraphTemplateIDs="/tmp/cacti-graph-template-id"
FilenameCactiGraphTemplateIDsFilter="/tmp/cacti-graph-template-id-filter"

#--------------Primary code--------------#

getmap "$MapID" | jq . > "$FilenameMapInfo"

MapWidth=`cat "$FilenameMapInfo" | jq -r .result[].width`
MapHeight=`cat "$FilenameMapInfo" | jq -r .result[].height`

createcactimapheader $MapWidth $MapHeight $FilenameCactiMapConfig

echo "select local_graph_id,title_cache    from graph_templates_graph;" |mysql cacti -uroot -p"$CactiPassDB" > $FilenameCactiGraphTemplateIDs
grep  "$CactiGraphName"  "$FilenameCactiGraphTemplateIDs" |grep "SW" > $FilenameCactiGraphTemplateIDsFilter

    SelementNumber=`cat "$FilenameMapInfo" | jq .result[].selements[].selementid | wc -l`
    echo "#regular NODEs:" >> $FilenameCactiMapConfig
    [ -e $FilenameHostNameAndSelementIDList ] && rm $FilenameHostNameAndSelementIDList
    for((i=0;i<$SelementNumber;i++))
    do
       ArraySelementInfo=(`cat "$FilenameMapInfo" |jq ".result[].selements[$i]| .selementid, .elementtype , .x , .y " |tr '\n' ' '`)
       ##CODE COMMENT:
       #ArraySelementInfo[0] is selementid
       #ArraySelementInfo[1] is elementtype
       #ArraySelementInfo[2] is x
       #ArraySelementInfo[3] is y

        ##CODE COMMENT: element type number:
        # 0 Host
        # 1 Map
        # 2 Trigger
        # 3 Host group
        # 4 Image


        if [ ${ArraySelementInfo[1]} = \"0\" ]
        then
            echo "Error:[Selementid ${ArraySelementInfo[0]}]: Host(0) for future arrangements"

        elif [ ${ArraySelementInfo[1]} = \"1\" ]
        then
            echo "Error:[Selementid ${ArraySelementInfo[0]}]: Map(1) for future arrangements"

        elif [ ${ArraySelementInfo[1]} = \"2\" ]
        then
                ArrayElementsOnSelementInfo=(`cat "$FilenameMapInfo" |jq ".result[].selements[$i] | .elements[].triggerid"  |tr '\n' ' '`)
#SCAFFOLD:  echo ${ArrayElementsOnSelementInfo[@]}

                [ -e $FilenameElementHostID ] && rm $FilenameElementHostID
                for Elements in "${ArrayElementsOnSelementInfo[@]}"
                do

                    gettrigger "$Elements" | jq   -r '.result[].hosts[].hostid' >> $FilenameElementHostID
                done

                if [ $(uniq $FilenameElementHostID |wc -l) == 1 ]
                then
                    HostName=$(gettrigger "${ArrayElementsOnSelementInfo[0]}" | jq   -r '.result[].hosts[].host')
                    echo "${ArraySelementInfo[0]}  $HostName" >> $FilenameHostNameAndSelementIDList
                else
                    echo "Error:[Selementid ${ArraySelementInfo[0]}]: Node with x=${ArraySelementInfo[2]} and x=${ArraySelementInfo[3]} has more than one host on trigger lists or hasn't any trigger. "
                fi
                x=$( echo "${ArraySelementInfo[2]}" | sed 's/^"\(.*\)"$/\1/' )
                y=$( echo "${ArraySelementInfo[3]}" | sed 's/^"\(.*\)"$/\1/' )
                CactiLocalGraphID=`grep "$HostName"  "$FilenameCactiGraphTemplateIDsFilter"|awk '{print $1}'`
                createcactimapnode  "$HostName" "$CactiLocalGraphID" $x $y "$FilenameCactiMapConfig"

        elif [ ${ArraySelementInfo[1]} = \"3\" ]
        then
            echo "Error:[Selementid ${ArraySelementInfo[0]}]: Hostgroup(3) for future arrangements"

        elif [ ${ArraySelementInfo[1]} = \"4\" ]
        then
            echo "Error:[Selementid ${ArraySelementInfo[0]}]: Image(4) for future arrangements"

        else
            echo "Error:[Selementid ${ArraySelementInfo[0]}] has problem"
        fi


    done


    echo "#regular LINKs:" >> "$FilenameCactiMapConfig"
    LinkNumber=`cat "$FilenameMapInfo" | jq .result[].links[].linkid | wc -l`
    for((i=0;i<$SelementNumber;i++))
    do

        ArrayLinkInfo=(`cat "$FilenameMapInfo" |jq ".result[].links[$i]| .selementid1, .selementid2 " |tr '\n' ' '`)

        HostName1=$(grep  "^${ArrayLinkInfo[0]}" "$FilenameHostNameAndSelementIDList" | awk '{print $2}'  )
        HostName2=$(grep  "^${ArrayLinkInfo[1]}" "$FilenameHostNameAndSelementIDList" | awk '{print $2}'  )
#SCAFFOLD:        echo "${ArrayLinkInfo[0]} $HostName1 <<<<>>>> ${ArrayLinkInfo[1]} $HostName2 "
        CactiLocalGraphID=`grep "$HostName2"  "$FilenameCactiGraphTemplateIDsFilter"|awk '{print $1}'`
        createcactimaplink $HostName1 $HostName2 "$CactiLocalGraphID" "$FilenameCactiMapConfig"

    done

echo "#That's All Folks!" >> "$FilenameCactiMapConfig"
#SCAFFOLD: cat $FilenameCactiMapConfig


#--------------end--------------#
